buildscript {
    apply from: 'gradle/buildscript.gradle', to: buildscript
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.18"
    }

}

plugins {
    id 'java-library'
}

apply plugin: 'nebula-aggregate-javadocs'


task archiveReports(type: Zip) {
    from "$buildDir/docs"
    include "/**/*"

    from "$buildDir/reports/clover"

    archiveName 'reports.zip'
}

allprojects {


    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'project-report'
//    apply plugin: 'com.bmuschko.clover'
    apply plugin: "com.diffplug.gradle.spotless"
    apply plugin: 'io.spring.dependency-management'


    spotless {
        java {
            googleJavaFormat('1.5')
        }
    }

//    clover {
//        report {
//            html = true
//        }
//    }


    def repos = [
            'http://artifacts.sunshower.io/repository/sunshower-cache'
    ]


    task testArtifact(type: Jar, dependsOn: testClasses) {
        classifier = 'tests'
        from sourceSets.test.output
    }


    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }


//    dependencies {
//        clover 'org.openclover:clover:4.3.1'
//    }

    repositories {
        mavenLocal()
        repos.each { repo ->
            maven {
                url "$repo"
                credentials {
                    username mavenRepositoryUsername
                    password mavenRepositoryPassword
                }
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom("io.sunshower.base:bom-imported:${version}")
        }
    }


    plugins.withType(JavaPlugin) {


//        test {
//            jvmArgs '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED'
//            jvmArgs '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
//            jvmArgs '--illegal-access=permit'
////            jvmArgs([
////                    '--add-exports java.base/jdk.internal.misc=ALL-UNNAMED',
////                    '--add-exports java.base/sun.nio.ch=ALL-UNNAMED',
////                    '--add-exports java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED',
////                    '--add-exports jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED',
////                    '--add-exportsjava.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED',
////                    '--illegal-access=permit',
////                    '-Djdk.tls.client.protocols=TLSv1.2'
////            ].join(' '))
//        }

        dependencies {
            annotationProcessor "org.projectlombok:lombok:1.18.6"
            compileOnly 'org.projectlombok:lombok:1.18.6'
            testCompileOnly 'org.projectlombok:lombok:1.18.6'
            testAnnotationProcessor 'org.projectlombok:lombok:1.18.6'
            implementation 'javax.ws.rs:javax.ws.rs-api'
            implementation 'org.eclipse.persistence:org.eclipse.persistence.moxy'
            implementation 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api'


            testCompile 'javax.mail:mail'

            testImplementation('org.hamcrest:hamcrest-core')
            testImplementation('org.mockito:mockito-core')

            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
            testImplementation 'org.junit.jupiter:junit-jupiter-api'

        }
    }


    publishing {
        repositories {
            maven {
                url mavenRepositoryUrl

                credentials {
                    username mavenRepositoryUsername
                    password mavenRepositoryPassword
                }
            }
        }

        publications {
            maven(MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }

                artifact testArtifact {
                    classifier = 'tests'
                }
            }
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

}


publishing {
    repositories {
        maven {
            url mavenRepositoryUrl

            credentials {
                username mavenRepositoryUsername
                password mavenRepositoryPassword
            }
        }
    }

//    publications {
//        maven(MavenPublication) {
//            artifact archiveReports {
//                classifier 'reports'
//            }
//        }
//    }
}


//assemble.dependsOn cloverAggregateReports
//assemble.dependsOn 'aggregateJavadocs'

assemble.dependsOn archiveReports
//archiveReports.mustRunAfter cloverAggregateReports
//archiveReports.mustRunAfter 'aggregateJavadocs'


defaultTasks 'clean', 'build'

